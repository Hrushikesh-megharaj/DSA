18. Linked List Operations
Question: Implement basic operations like insertion, deletion, and traversal in a linked list.

c
Copy code
#include <stdio.h>
#include <stdlib.h>

// Define a Node structure
struct Node {
    int data;
    struct Node *next;
};

// Function to insert a new node at the beginning of the linked list
void insertAtBeginning(struct Node **head_ref, int new_data) {
    struct Node *new_node = (struct Node *)malloc(sizeof(struct Node));
    new_node->data = new_data;
    new_node->next = *head_ref;
    *head_ref = new_node;
}

// Function to delete a node with given key from the linked list
void deleteNode(struct Node **head_ref, int key) {
    struct Node *temp = *head_ref, *prev;

    if (temp != NULL && temp->data == key) {
        *head_ref = temp->next;
        free(temp);
        return;
    }

    while (temp != NULL && temp->data != key) {
        prev = temp;
        temp = temp->next;
    }

    if (temp == NULL) return;

    prev->next = temp->next;
    free(temp);
}

// Function to print the linked list
void printList(struct Node *node) {
    while (node != NULL) {
        printf("%d ", node->data);
        node = node->next;
    }
    printf("\n");
}

int main() {
    struct Node *head = NULL;

    // Insert some elements
    insertAtBeginning(&head, 3);
    insertAtBeginning(&head, 7);
    insertAtBeginning(&head, 9);
    insertAtBeginning(&head, 5);

    printf("Linked list: ");
    printList(head);

    // Delete an element
    deleteNode(&head, 7);

    printf("Linked list after deletion: ");
    printList(head);

    return 0;
}
19. Stack Implementation
Question: Implement basic stack operations like push, pop, display and peek.

c
Copy code
#include <stdio.h>
#include <stdlib.h>

#define MAX_SIZE 100

// Define a stack structure
struct Stack {
    int items[MAX_SIZE];
    int top;
};

// Function to initialize the stack
void initializeStack(struct Stack *stack) {
    stack->top = -1;
}

// Function to check if the stack is empty
int isEmpty(struct Stack *stack) {
    return (stack->top == -1);
}

// Function to check if the stack is full
int isFull(struct Stack *stack) {
    return (stack->top == MAX_SIZE - 1);
}

// Function to push an element onto the stack
void push(struct Stack *stack, int value) {
    if (isFull(stack)) {
        printf("Stack Overflow\n");
        return;
    }
    stack->items[++stack->top] = value;
}

// Function to pop an element from the stack
int pop(struct Stack *stack) {
    if (isEmpty(stack)) {
        printf("Stack Underflow\n");
        exit(EXIT_FAILURE);
    }
    return stack->items[stack->top--];
}

// Function to display the elements of the stack
void display(struct Stack *stack) {
    printf("Stack: ");
    for (int i = stack->top; i >= 0; i--) {
        printf("%d ", stack->items[i]);
    }
    printf("\n");
}

// Function to peek the top element of the stack
int peek(struct Stack *stack) {
    if (isEmpty(stack)) {
        printf("Stack is empty\n");
        exit(EXIT_FAILURE);
    }
    return stack->items[stack->top];
}

int main() {
    struct Stack stack;
    initializeStack(&stack);

    // Push some elements onto the stack
    push(&stack, 10);
    push(&stack, 20);
    push(&stack, 30);

    display(&stack);

    // Pop an element from the stack
    printf("Popped element: %d\n", pop(&stack));

    display(&stack);

    // Peek the top element
    printf("Top element: %d\n", peek(&stack));

    return 0;
}
20. Queue Implementation
Question: Implement basic queue operations like enqueue and dequeue, display.

c
Copy code
#include <stdio.h>
#include <stdlib.h>

#define MAX_SIZE 100

// Define a queue structure
struct Queue {
    int items[MAX_SIZE];
    int front, rear;
};

// Function to initialize the queue
void initializeQueue(struct Queue *queue) {
    queue->front = -1;
    queue->rear = -1;
}

// Function to check if the queue is empty
int isEmpty(struct Queue *queue) {
    return (queue->front == -1);
}

// Function to check if the queue is full
int isFull(struct Queue *queue) {
    return ((queue->rear + 1) % MAX_SIZE == queue->front);
}

// Function to enqueue an element into the queue
void enqueue(struct Queue *queue, int value) {
    if (isFull(queue)) {
        printf("Queue Overflow\n");
        return;
    }
    if (isEmpty(queue))
        queue->front = 0;
    queue->rear = (queue->rear + 1) % MAX_SIZE;
    queue->items[queue->rear] = value;
}

// Function to dequeue an element from the queue
int dequeue(struct Queue *queue) {
    if (isEmpty(queue)) {
        printf("Queue Underflow\n");
        exit(EXIT_FAILURE);
    }
    int removed = queue->items[queue->front];
    if (queue->front == queue->rear)
        queue->front = queue->rear = -1;
    else
        queue->front = (queue->front + 1) % MAX_SIZE;
    return removed;
}

// Function to display the elements of the queue
void display(struct Queue *queue) {
    if (isEmpty(queue)) {
        printf("Queue is empty\n");
        return;
    }
    printf("Queue: ");
    int i = queue->front;
    while (i != queue->rear) {
        printf("%d ", queue->items[i]);
        i = (i + 1) % MAX_SIZE;
    }
    printf("%d\n", queue->items[queue->rear]);
}

int main() {
    struct Queue queue;
    initializeQueue(&queue);

    // Enqueue some elements into the queue
    enqueue(&queue, 10);
    enqueue(&queue, 20);
    enqueue(&queue, 30);

    display(&queue);

    // Dequeue an element from the queue
    printf("Dequeued element: %d\n", dequeue(&queue));

    display(&queue);

    return 0;
}
21. Implement Variants of Queues: Circular Queue, Double-ended Queue, Priority Queue.
Circular Queue:
c
Copy code
#include <stdio.h>
#include <stdlib.h>

#define MAX_SIZE 5

// Define a circular queue structure
struct CircularQueue {
    int items[MAX_SIZE];
    int front, rear;
};

// Function to initialize the circular queue
void initializeCircularQueue(struct CircularQueue *queue) {
    queue->front = -1;
    queue->rear = -1;
}

// Function to check if the circular queue is empty
int isCircularQueueEmpty(struct CircularQueue *queue) {
    return (queue->front == -1);
}

// Function to check if the circular queue is full
int isCircularQueueFull(struct CircularQueue *queue) {
    return ((queue->rear + 1) % MAX_SIZE == queue->front);
}

// Function to enqueue an element into the circular queue
void enqueueCircular(struct CircularQueue *queue, int value) {
    if (isCircularQueueFull(queue)) {
        printf("Circular Queue Overflow\n");
        return;
    }
    if (isCircularQueueEmpty(queue))
        queue->front = 0;
    queue->rear = (queue->rear + 1) % MAX_SIZE;
    queue->items[queue->rear] = value;
}

// Function to dequeue an element from the circular queue
int dequeueCircular(struct CircularQueue *queue) {
    if (isCircularQueueEmpty(queue)) {
        printf("Circular Queue Underflow\n");
        exit(EXIT_FAILURE);
    }
    int removed = queue->items[queue->front];
    if (queue->front == queue->rear)
        queue->front = queue->rear = -1;
    else
        queue->front = (queue->front + 1) % MAX_SIZE;
    return removed;
}

// Function to display the elements of the circular queue
void displayCircularQueue(struct CircularQueue *queue) {
    if (isCircularQueueEmpty(queue)) {
        printf("Circular Queue is empty\n");
        return;
    }
    printf("Circular Queue: ");
    int i = queue->front;
    do {
        printf("%d ", queue->items[i]);
        i = (i + 1) % MAX_SIZE;
    } while (i != (queue->rear + 1) % MAX_SIZE);
    printf("\n");
}

int main() {
    struct CircularQueue queue;
    initializeCircularQueue(&queue);

    // Enqueue some elements into the circular queue
    enqueueCircular(&queue, 10);
    enqueueCircular(&queue, 20);
    enqueueCircular(&queue, 30);

    displayCircularQueue(&queue);

    // Dequeue an element from the circular queue
    printf("Dequeued element: %d\n", dequeueCircular(&queue));

    displayCircularQueue(&queue);

    return 0;
}
Double-ended Queue (Deque):
c
Copy code
#include <stdio.h>
#include <stdlib.h>

#define MAX_SIZE 5

// Define a double-ended queue structure
struct Deque {
    int items[MAX_SIZE];
    int front, rear;
};

// Function to initialize the double-ended queue
void initializeDeque(struct Deque *deque) {
    deque->front = -1;
    deque->rear = -1;
}

// Function to check if the double-ended queue is empty
int isDequeEmpty(struct Deque *deque) {
    return (deque->front == -1);
}

// Function to check if the double-ended queue is full
int isDequeFull(struct Deque *deque) {
    return ((deque->front == 0 && deque->rear == MAX_SIZE - 1) || (deque->rear == (deque->front - 1) % (MAX_SIZE - 1)));
}

// Function to add an element at the front of the double-ended queue
void addFront(struct Deque *deque, int value) {
    if (isDequeFull(deque)) {
        printf("Deque Overflow\n");
        return;
    }
    if (deque->front == -1) {
        deque->front = deque->rear = 0;
    } else if (deque->front == 0) {
        deque->front = MAX_SIZE - 1;
    } else {
        deque->front--;
    }
    deque->items[deque->front] = value;
}

// Function to add an element at the rear of the double-ended queue
void addRear(struct Deque *deque, int value) {
    if (isDequeFull(deque)) {
        printf("Deque Overflow\n");
        return;
    }
    if (deque->front == -1) {
        deque->front = deque->rear = 0;
    } else if (deque->rear == MAX_SIZE - 1) {
        deque->rear = 0;
    } else {
        deque->rear++;
    }
    deque->items[deque->rear] = value;
}

// Function to remove an element from the front of the double-ended queue
int removeFront(struct Deque *deque) {
    if (isDequeEmpty(deque)) {
        printf("Deque Underflow\n");
        exit(EXIT_FAILURE);
    }
    int removed = deque->items[deque->front];
    if (deque->front == deque->rear) {
        deque->front = deque->rear = -1;
    } else {
        if (deque->front == MAX_SIZE - 1) {
            deque->front = 0;
        } else {
            deque->front++;
        }
    }
    return removed;
}

// Function to remove an element from the rear of the double-ended queue
int removeRear(struct Deque *deque) {
    if (isDequeEmpty(deque)) {
        printf("Deque Underflow\n");
        exit(EXIT_FAILURE);
    }
    int removed = deque->items[deque->rear];
    if (deque->front == deque->rear) {
        deque->front = deque->rear = -1;
    } else if (deque->rear == 0) {
        deque->rear = MAX_SIZE - 1;
    } else {
        deque->rear--;
    }
    return removed;
}

// Function to display the elements of the double-ended queue
void displayDeque(struct Deque *deque) {
    if (isDequeEmpty(deque)) {
        printf("Deque is empty\n");
        return;
    }
    printf("Deque: ");
    int i = deque->front;
    do {
        printf("%d ", deque->items[i]);
        i = (i + 1) % MAX_SIZE;
    } while (i != (deque->rear + 1) % MAX_SIZE);
    printf("\n");
}

int main() {
    struct Deque deque;
    initializeDeque(&deque);

    // Add some elements to the front and rear of the deque
    addFront(&deque, 10);
    addFront(&deque, 20);
    addRear(&deque, 30);
    addRear(&deque, 40);

    displayDeque(&deque);

    // Remove elements from the front and rear of the deque
    printf("Removed front element: %d\n", removeFront(&deque));
    printf("Removed rear element: %d\n", removeRear(&deque));

    displayDeque(&deque);

    return 0;
}
Priority Queue:
#include <stdio.h>
#include <stdlib.h>

#define MAX_SIZE 5

// Define a Priority Queue structure
struct PriorityQueue {
    int items[MAX_SIZE];
    int front, rear;
};

// Function to initialize the Priority Queue
void initializePriorityQueue(struct PriorityQueue *queue) {
    queue->front = -1;
    queue->rear = -1;
}

// Function to check if the Priority Queue is empty
int isPriorityQueueEmpty(struct PriorityQueue *queue) {
    return (queue->front == -1);
}

// Function to check if the Priority Queue is full
int isPriorityQueueFull(struct PriorityQueue *queue) {
    return (queue->rear == MAX_SIZE - 1);
}

// Function to enqueue an element into the Priority Queue based on priority
void enqueuePriority(struct PriorityQueue *queue, int value, int priority) {
    if (isPriorityQueueFull(queue)) {
        printf("Priority Queue Overflow\n");
        return;
    }
    if (isPriorityQueueEmpty(queue)) {
        queue->front = queue->rear = 0;
    } else {
        int i;
        for (i = queue->rear; i >= queue->front; i--) {
            if (priority > queue->items[i]) {
                queue->items[i + 1] = queue->items[i];
            } else {
                break;
            }
        }
        queue->items[i + 1] = value;
        queue->rear++;
    }
}

// Function to dequeue an element from the Priority Queue
int dequeuePriority(struct PriorityQueue *queue) {
    if (isPriorityQueueEmpty(queue)) {
        printf("Priority Queue Underflow\n");
        exit(EXIT_FAILURE);
    }
    int removed = queue->items[queue->front];
    if (queue->front == queue->rear) {
        queue->front = queue->rear = -1;
    } else {
        queue->front++;
    }
    return removed;
}

// Function to display the elements of the Priority Queue
void displayPriorityQueue(struct PriorityQueue *queue) {
    if (isPriorityQueueEmpty(queue)) {
        printf("Priority Queue is empty\n");
        return;
    }
    printf("Priority Queue: ");
    for (int i = queue->front; i <= queue->rear; i++) {
        printf("%d ", queue->items[i]);
    }
    printf("\n");
}

int main() {
    struct PriorityQueue queue;
    initializePriorityQueue(&queue);

    // Enqueue some elements into the Priority Queue with priorities
    enqueuePriority(&queue, 10, 2);
    enqueuePriority(&queue, 20, 1);
    enqueuePriority(&queue, 30, 3);

    displayPriorityQueue(&queue);

    // Dequeue an element from the Priority Queue
    printf("Dequeued element: %d\n", dequeuePriority(&queue));

    displayPriorityQueue(&queue);

    return 0;
}
